---
- name: Install and configure Next.js application with NGINX
  hosts: webservers
  become: yes
  vars:
    app_dir: /var/www/nextjs
    node_version: "18"
    domain_name: "me.huzaifali.tech"
    
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install curl and other dependencies
      apt:
        name:
          - curl
          - software-properties-common
          - gnupg
          - build-essential
        state: present

    - name: Add NodeSource GPG key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add NodeSource repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Install Node.js
      apt:
        name: nodejs
        state: present

    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'

    - name: Copy Next.js root configuration files
      copy:
        src: "{{ item }}"
        dest: "{{ app_dir }}/{{ item | basename }}"
        mode: '0644'
      with_fileglob:
        - "../app/.gitignore"
        - "../app/components.json"
        - "../app/next-env.d.ts"
        - "../app/next.config.mjs"
        - "../app/package-lock.json"
        - "../app/package.json"
        - "../app/pnpm-lock.yaml"
        - "../app/postcss.config.mjs"
        - "../app/tailwind.config.ts"
        - "../app/tsconfig.json"
      failed_when: false

    - name: Copy app directory (Next.js App Router)
      copy:
        src: "../app/app/"
        dest: "{{ app_dir }}/app/"
        mode: '0644'

    - name: Copy components directory
      copy:
        src: "../app/components/"
        dest: "{{ app_dir }}/components/"
        mode: '0644'

    - name: Copy hooks directory
      copy:
        src: "../app/hooks/"
        dest: "{{ app_dir }}/hooks/"
        mode: '0644'

    - name: Copy lib directory
      copy:
        src: "../app/lib/"
        dest: "{{ app_dir }}/lib/"
        mode: '0644'

    - name: Copy public directory
      copy:
        src: "../app/public/"
        dest: "{{ app_dir }}/public/"
        mode: '0644'

    - name: Copy styles directory
      copy:
        src: "../app/styles/"
        dest: "{{ app_dir }}/styles/"
        mode: '0644'

    - name: Set ownership of application directory
      file:
        path: "{{ app_dir }}"
        owner: azureuser
        group: azureuser
        recurse: yes

    - name: Install npm dependencies with legacy peer deps
      shell: |
        cd {{ app_dir }}
        npm install --legacy-peer-deps
      become_user: azureuser
      environment:
        HOME: /home/azureuser
        PATH: "/usr/bin:/bin:/usr/local/bin"
      register: npm_install_result
      retries: 3
      delay: 10
      failed_when: npm_install_result.rc != 0

    - name: Display npm install output
      debug:
        var: npm_install_result.stdout
      when: npm_install_result.stdout is defined

    - name: Build Next.js application
      command: npm run build
      args:
        chdir: "{{ app_dir }}"
      become_user: azureuser
      environment:
        HOME: /home/azureuser
        PATH: "/usr/bin:/bin:/usr/local/bin"
      register: build_result
      failed_when: build_result.rc != 0
      retries: 2
      delay: 5

    - name: Create PM2 ecosystem file
      copy:
        content: |
          module.exports = {
            apps: [{
              name: 'nextjs-app',
              script: 'npm',
              args: 'start',
              cwd: '{{ app_dir }}',
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '1G',
              env: {
                NODE_ENV: 'production',
                PORT: 3000
              }
            }]
          }
        dest: "{{ app_dir }}/ecosystem.config.js"
        owner: azureuser
        group: azureuser
        mode: '0644'

    - name: Stop existing PM2 processes
      command: pm2 delete all
      become_user: azureuser
      environment:
        HOME: /home/azureuser
        PATH: "/usr/bin:/bin:/usr/local/bin"
      failed_when: false

    - name: Start Next.js application with PM2
      command: pm2 start ecosystem.config.js
      args:
        chdir: "{{ app_dir }}"
      become_user: azureuser
      environment:
        HOME: /home/azureuser
        PATH: "/usr/bin:/bin:/usr/local/bin"

    - name: Save PM2 configuration
      command: pm2 save
      become_user: azureuser
      environment:
        HOME: /home/azureuser
        PATH: "/usr/bin:/bin:/usr/local/bin"

    - name: Enable PM2 startup
      command: pm2 startup
      become_user: azureuser
      environment:
        HOME: /home/azureuser
        PATH: "/usr/bin:/bin:/usr/local/bin"
      register: pm2_startup
      failed_when: false

    - name: Execute PM2 startup command
      shell: "{{ pm2_startup.stdout_lines[-1] }}"
      when: pm2_startup.stdout_lines is defined and pm2_startup.stdout_lines | length > 0
      failed_when: false

    - name: Configure firewall for port 3000
      ufw:
        rule: allow
        port: '3000'
        proto: tcp
      failed_when: false

    # NGINX Configuration Tasks
    - name: Install NGINX and Certbot
      apt:
        name:
          - nginx
          - certbot
          - python3-certbot-nginx
        state: present
        update_cache: yes

    - name: Create initial NGINX config for Next.js subdomain (HTTP only for SSL setup)
      copy:
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        content: |
          server {
              listen 80;
              server_name {{ domain_name }};

              # Allow Let's Encrypt challenges
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_read_timeout 86400;
              }
          }
        mode: '0644'

    - name: Enable the site
      file:
        src: "/etc/nginx/sites-available/{{ domain_name }}"
        dest: "/etc/nginx/sites-enabled/{{ domain_name }}"
        state: link
        force: yes

    - name: Remove default NGINX site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Test NGINX configuration
      command: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0

    - name: Configure firewall for HTTP
      ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: Configure firewall for HTTPS
      ufw:
        rule: allow
        port: '443'
        proto: tcp

    - name: Restart NGINX (initial setup)
      service:
        name: nginx
        state: restarted
        enabled: yes

    # SSL Certificate Setup
    - name: Check if SSL certificate already exists
      stat:
        path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
      register: ssl_cert

    - name: Obtain SSL certificate from Let's Encrypt
      command: >
        certbot --nginx
        --non-interactive
        --agree-tos
        --email admin@{{ domain_name.split('.')[1:] | join('.') }}
        --domains {{ domain_name }}
        --redirect
      when: not ssl_cert.stat.exists
      register: certbot_result
      failed_when: certbot_result.rc != 0

    - name: Create enhanced NGINX config with SSL and security headers
      copy:
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        content: |
          # Redirect HTTP to HTTPS
          server {
              listen 80;
              server_name {{ domain_name }};
              return 301 https://$server_name$request_uri;
          }

          # HTTPS server
          server {
              listen 443 ssl http2;
              server_name {{ domain_name }};

              # SSL Configuration
              ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;
              ssl_trusted_certificate /etc/letsencrypt/live/{{ domain_name }}/chain.pem;

              # SSL Security Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
              ssl_prefer_server_ciphers off;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;
              ssl_session_tickets off;
              ssl_stapling on;
              ssl_stapling_verify on;

              # Security headers
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_proxied expired no-cache no-store private must-revalidate auth;
              gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/javascript application/xml+rss application/json;

              # Main location block
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_read_timeout 86400;
              }

              # Static files caching
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }

              # Security.txt location
              location = /.well-known/security.txt {
                  return 301 https://{{ domain_name }}/.well-known/security.txt;
              }
          }
        mode: '0644'
      when: ssl_cert.stat.exists or certbot_result.changed

    - name: Final NGINX restart with SSL configuration
      service:
        name: nginx
        state: restarted

    - name: Setup SSL certificate auto-renewal
      cron:
        name: "Renew Let's Encrypt certificates"
        minute: "0"
        hour: "12"
        job: "/usr/bin/certbot renew --quiet && /usr/bin/systemctl reload nginx"
        user: root

    - name: Display application status
      debug:
        msg: |
          Next.js application has been deployed successfully with HTTPS!
          - Application directory: {{ app_dir }}
          - Application URL: https://{{ domain_name }}
          - HTTP redirects to HTTPS automatically
          - PM2 process name: nextjs-app
          - Check status with: pm2 status
          - View logs with: pm2 logs nextjs-app
          - NGINX config: /etc/nginx/sites-available/{{ domain_name }}
          - SSL certificate: /etc/letsencrypt/live/{{ domain_name }}/
          
          SSL Features:
          - TLS 1.2 and 1.3 support
          - HTTP/2 enabled
          - Auto-renewal configured via cron
          - Security headers included
          - HSTS enabled
          
          DNS Configuration Required:
          - Set A record: {{ domain_name }} -> Your server's public IP
          - TTL: 3600 seconds (1 hour) for testing